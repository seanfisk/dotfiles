#!/usr/bin/env python

# Python 2/3 compatible

from __future__ import (
    division, absolute_import, print_function, unicode_literals)
import os
import site
import locale
import argparse
import itertools
import subprocess
from pipes import quote as shquote

cmdline_parser = argparse.ArgumentParser(
    description="Update the current Python's packages.")
cmdline_parser.add_argument('-d', '--debug', action='store_true',
                            help='print pip command-line which is run')
cmdline_args = cmdline_parser.parse_args()
debug = cmdline_args.debug

# Setup arguments
pip_args = ['pip', 'install']

# If any of the site-packages directories are not writable by us, add the
# '--user' flag.
if any(os.path.isdir(d) and not os.access(d, os.W_OK)
       for d in site.getsitepackages()):
    pip_args.append('--user')

pip_args += ['--upgrade']

def _run_pip(args):
    if debug:
        print('Running: ' + ' '.join(
            shquote(arg) for arg in (pip_args + args)))
    subprocess.check_call(pip_args + args)

# First, upgrade pip and setuptools themselves.
_run_pip(['pip', 'setuptools'])

# Now, update all requirements files.
requirements_files = [@REQUIREMENTS_DEFAULT_VENV_PATH@]

# If this is the default (system) Python, update requirements for it.
pyenv_version = subprocess.check_output(
    [@PYENV@, 'version-name']).decode(
    locale.getpreferredencoding()).rstrip()
if pyenv_version == 'system':
    requirements_files.append(@REQUIREMENTS_DEFAULT_PYTHON_PATH@)

# If there is a requirements file in the current directory, update using it.
REQUIREMENTS_FILE_NAME = 'requirements.txt'
if os.path.isfile(REQUIREMENTS_FILE_NAME):
    requirements_files.append(REQUIREMENTS_FILE_NAME)

_run_pip(list(itertools.chain.from_iterable(
    ('--requirement', path) for path in requirements_files)))
